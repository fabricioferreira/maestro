<!DOCTYPE html>
<html>
  <head>
    <title>Report</title>
    <link rel="stylesheet" href="/bootstrap.css">
    <link rel="stylesheet" href="/bootstrap-theme.css">
    <link rel='stylesheet' href='/style.css' />
  </head>
  <body>
    
    <script src="/socket.io/socket.io.js"></script>
   
    <script src="/jquery-2.1.4.js"></script>
    <script src="/bootstrap.js"></script>
    
    <!--<script src="https://code.highcharts.com/stock/highstock.js"></script>
    <script src="https://code.highcharts.com/stock/modules/exporting.js"></script>-->
    
    <script src="/highstock.js"></script>
    <script src="/exporting.js"></script>

    <div class="container">
      <div class="row">
        <div class="col-md-12">
          <h1>Report</h1>
          <p>All things are green</p>
        </div>
      </div>
      
      <div class="row">
        <div class="col-md-12">
          <div id="all" style="height: 400px; min-width: 310px"></div>
        </div>
      </div>
      
      <div class="row">
        <div class="col-md-12">
          <div id="step" style="height: 400px; min-width: 310px"></div>
        </div>
      </div>
      
      <div class="row">
        <div class="col-md-12 text-right">
          <button disabled class="btn btn-primary" >Start Interface</button>
          <button class="btn btn-default">Stop Interface</button>
        </div>
      </div>
      
    </div>
    
    <table class="table table-hover">
  ...
</table>

    <script>
      
      $().ready(function() {
        
        var data = {};
        var isChartsCreated = false;
        
        Highcharts.setOptions({
          global : {
            useUTC : false
          }
        });
        
        
        function generateAllData(data) {
          
          var keys = Object.keys(data._counter)
          
          if (keys.length < 5) {
            return [0, 0];
          }
                    
          keys.sort();
          
          var keyLast = keys[keys.length - 5];
          
          var update = data._counter[keyLast];
          
          var x = parseInt(keyLast);
          var y = update.med;
          
          return [x, y];
        }
        
        
        
        function buildAllChart(selector, generator, firstData) {
          
          var _data = (function () {
            // generate an array of random data
            var data = [];
            var time = firstData._lastCurrentSeccond;
            var i;
            
            for (i = -999; i <= 0; i += 1) {
              
            }
            return data;
          }())
          
          var dataLength = 1000;
          
          var prevData = [];
          var counters = firstData._counter;
          var keys = Object.keys(counters);
          
          for (var i=0; i<keys.length - 1; i++) {
            var k = keys[i];
            var c = counters[k];
            
            var x = parseInt(k);
            var y = c.all;
            prevData.push([x,y]);
          }
          
          var zeroData = [];
          var missing = dataLength - prevData.length;
          var olderCounter = prevData[0];
          
          if (olderCounter) {
            for (var i=(missing*-1); i<0; i++) {
              zeroData.push([
                olderCounter[0] + i * 1000,
                0
              ]);
            }
          }
          else {
            for (var i=(missing*-1); i<0; i++) {
              zeroData.push([
                Date.now() + i * 1000,
                0
              ]);
            }
          }
          
          
          
          var chartData = [];
          for (var i=0; i<zeroData.length; i++) {
            chartData.push(zeroData[i])
          }
          for (var i=0; i<prevData.length; i++) {
            chartData.push(prevData[i])
          }
          
          
          
          // Create the chart
          $(selector).highcharts('StockChart', {
            chart : {
              events : {
                load : function () {
                
                  // set up the updating of the chart each second
                  var series = this.series[0];
                  setInterval(function () {
                    var v = generator(data);
                    series.addPoint(v, true, true);
                  }, 500);
                }
              }
            },
            
            rangeSelector: {
              buttons: [{
                count: 1,
                type: 'minute',
                text: '1M'
              }, {
                count: 5,
                type: 'minute',
                text: '5M'
              }, {
                type: 'all',
                text: 'All'
              }],
              inputEnabled: false,
              selected: 0
            },
            
            title : {
              text : 'Average Time Processing Requests'
            },
            
            exporting: {
              enabled: false
            },
            
            series : [{
              name : 'Time Processing (ms)',
              data: chartData
              // data: (function () {
              //   // generate an array of random data
              //   var data = [];
              //   var time = firstData._lastCurrentSeccond;
              //   var i;
              //   
              //   for (i = -999; i <= 0; i += 1) {
              //     data.push([
              //       time + i * 1000,
              //       0
              //     ]);
              //   }
              //   return data;
              // }())
            }]
          });
        }
        
        
        
        function generateStepData(data) {
          var keys = Object.keys(data._counter)
          
          if (keys.length < 5) {
            return [0, 0];
          }
                    
          keys.sort();
          
          var keyLast = keys[keys.length - 5];
          
          var update = data._counter[keyLast];
          var steps = update.steps.map(function (el) {
            return el.total / update.count
          })
          
          return steps;
        }
        
        
        function buildStepChart(selector, generator, firstData) {
          
          var cats = [];
          var key = Object.keys(firstData._counter)[0];
          var dataSteps = firstData._counter[key].steps;
          
          for (var i in dataSteps) {
            cats.push(dataSteps[i].name)
          }
          
          var perf = [];
          for (var i in cats) {
            perf[i] = 0;
          }
            
          $('#step').highcharts({
              chart: {
                  type: 'column'
              },
              title: {
                  text: 'Average Time on Each Step'
              },
              xAxis: {
                  categories: cats,
                  crosshair: true
              },
              yAxis: {
                  min: 0,
                  title: {
                      text: 'Time (ms)'
                  }
              },
              tooltip: {
                  headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                  pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                      '<td style="padding:0"><b>{point.y:.1f} mm</b></td></tr>',
                  footerFormat: '</table>',
                  shared: true,
                  useHTML: true
              },
              plotOptions: {
                  column: {
                      pointPadding: 0.2,
                      borderWidth: 0
                  }
              },
              series: [{
                  name: 'Performance',
                  data: perf
              }]
          });
          
          setInterval(function() {
            var d = {
                  name: 'Performance',
                  data: generateStepData(data)
              };
            
            
            $('#step').highcharts().series[0].setData(d.data, true);
          }, 500)
        }
        
        var socket = io.connect('http://localhost:8888');
        socket.on('news', function (data) {
          console.log(data);
          socket.emit('my other event', { my: 'data' });
        });
        socket.on('update', function(_data) {
          data = _data;
          
          if (!isChartsCreated) {
            console.log(_data);
            isChartsCreated = true;
            
            buildAllChart('#all', generateAllData, data);
            buildStepChart('#step', generateStepData, data);
          }
          
          
        })
       
      });
    </script>

  </body>
</html>
